{"version":3,"sources":["logo.svg","components/Home.js","components/Company.js","components/About.js","components/PageNotFound.js","components/InputErrorMessage.js","utilities/utilities.js","components/FormCreate.js","components/FormUpdate.js","components/Card.js","components/Blogs.js","components/AppRouter.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Home","react_default","a","createElement","Component","Company","About","PageNotFound","state","InpurErrorMessage","_ref","errors","inputName","result","style","color","generateUniqueId","Math","random","toString","substr","Form","title","description","imageUrl","isSubmitedSuccessfully","onInputChange","event","_this","setState","Object","defineProperty","target","name","value","verifyFormInputs","fromValues","_","isEmpty","onFormSubmit","preventDefault","verificationResult","pick","props","onCreateBlog","_this$state","this","react_router","to","onSubmit","type","onChange","InputErrorMessage","FormUpdate","id","onCancel","history","push","console","log","onUpdateBlog","_this$props","blog","getBlogById","match","params","objectSpread","onClick","Card","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onClickShowUpdateForm","concat","_this2","onDeleteBlog","className","src","withRouter","Blogs","listBlogs","map","components_Card","assign","key","AppRouter","toConsumableArray","newListBlogs","find","filter","Fragment","react_router_dom","exact","activeClassName","path","component","render","FormCreate","components_FormUpdate","components_Blogs","App","components_AppRouter","Boolean","window","location","hostname","ReactDOM","basename","process","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.620178bc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { Component } from \"react\";\r\n\r\nclass Home extends Component {\r\n  render() {\r\n    return <h1>home page</h1>;\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Company extends Component {\r\n  render() {\r\n    return <h1>company page</h1>;\r\n  }\r\n}\r\n\r\nexport default Company;\r\n","import React, { Component } from \"react\";\r\n\r\nclass About extends Component {\r\n  render() {\r\n    return <h1>About page</h1>;\r\n  }\r\n}\r\n\r\nexport default About;\r\n","import React, { Component } from \"react\";\r\n\r\nclass PageNotFound extends Component {\r\n  state = {};\r\n  render() {\r\n    return <h1>page not found !!</h1>;\r\n  }\r\n}\r\n\r\nexport default PageNotFound;\r\n","import React, { Component } from \"react\";\r\n\r\nconst InpurErrorMessage = ({ errors, inputName }) => {\r\n  let result = null;\r\n  if (errors && errors[inputName]) {\r\n    result = <span style={{ color: \"red\" }}>{errors[inputName]}</span>;\r\n  }\r\n  return result;\r\n\r\n  //     return (\r\n  //     errors &&\r\n  //     (errors[inputName] || null) && (\r\n  //       <span style={{ color: \"red\" }}>{errors[inputName]}</span>\r\n  //     )\r\n  //   );\r\n};\r\n\r\nexport default InpurErrorMessage;\r\n","export const generateUniqueId = () => {\r\n  return (\r\n    \"_\" +\r\n    Math.random()\r\n      .toString(36)\r\n      .substr(2, 9)\r\n  );\r\n};\r\n","import React, { Component } from \"react\";\r\nimport _ from \"lodash\";\r\nimport InputErrorMessage from \"./InputErrorMessage\";\r\nimport { generateUniqueId } from \"../utilities/utilities\";\r\nimport { Redirect } from \"react-router-dom\";\r\nclass Form extends Component {\r\n  state = {\r\n    title: \"\",\r\n    description: \"\",\r\n    imageUrl: \"\",\r\n    errors: null,\r\n    isSubmitedSuccessfully: false\r\n  };\r\n\r\n  onInputChange = event => {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  };\r\n\r\n  verifyFormInputs = fromValues => {\r\n    let errors = {};\r\n\r\n    if (fromValues.title == \"\") {\r\n      errors.title = \"empty title !\";\r\n    }\r\n    if (fromValues.description == \"\") {\r\n      errors.description = \"empty description !\";\r\n    }\r\n    if (fromValues.imageUrl == \"\") {\r\n      errors.imageUrl = \"empty imageUrl !\";\r\n    }\r\n    if (_.isEmpty(errors)) return null;\r\n    else return errors;\r\n  };\r\n\r\n  onFormSubmit = event => {\r\n    event.preventDefault();\r\n\r\n    const verificationResult = this.verifyFormInputs(\r\n      _.pick(this.state, [\"title\", \"description\", \"imageUrl\"])\r\n    );\r\n\r\n    if (!verificationResult) {\r\n      this.props.onCreateBlog(\r\n        generateUniqueId(),\r\n        this.state.title,\r\n        this.state.description,\r\n        this.state.imageUrl\r\n      );\r\n      this.setState({ isSubmitedSuccessfully: true });\r\n\r\n      //  this.props.history.push(\"/blogs\");\r\n    }\r\n    this.setState({ errors: verificationResult });\r\n  };\r\n\r\n  render() {\r\n    const { errors, isSubmitedSuccessfully } = this.state;\r\n\r\n    if (isSubmitedSuccessfully) {\r\n      return <Redirect to=\"/blogs\" />;\r\n    }\r\n    return (\r\n      <form onSubmit={this.onFormSubmit}>\r\n        <label>\r\n          title:\r\n          <input\r\n            name=\"title\"\r\n            type=\"text\"\r\n            value={this.state.title}\r\n            onChange={this.onInputChange}\r\n          />\r\n          <InputErrorMessage errors={errors} inputName=\"title\" />\r\n        </label>\r\n        <br />\r\n        <label>\r\n          description:\r\n          <input\r\n            name=\"description\"\r\n            type=\"text\"\r\n            value={this.state.description}\r\n            onChange={this.onInputChange}\r\n          />\r\n          <InputErrorMessage errors={errors} inputName=\"description\" />\r\n        </label>\r\n        <br />\r\n        <label>\r\n          imageUrl:\r\n          <input\r\n            name=\"imageUrl\"\r\n            type=\"text\"\r\n            value={this.state.imageUrl}\r\n            onChange={this.onInputChange}\r\n          />\r\n          <InputErrorMessage errors={errors} inputName=\"imageUrl\" />\r\n        </label>\r\n        <br />\r\n        <input type=\"submit\" value=\"Submit\" />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","import React, { Component } from \"react\";\r\nimport _ from \"lodash\";\r\nimport InputErrorMessage from \"./InputErrorMessage\";\r\nimport { generateUniqueId } from \"../utilities/utilities\";\r\n\r\nclass FormUpdate extends Component {\r\n  state = {\r\n    id: \"\",\r\n    title: \"\",\r\n    description: \"\",\r\n    imageUrl: \"\",\r\n    errors: null\r\n  };\r\n\r\n  onInputChange = event => {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  };\r\n\r\n  verifyFormInputs = fromValues => {\r\n    let errors = {};\r\n\r\n    if (fromValues.title == \"\") {\r\n      errors.title = \"empty title !\";\r\n    }\r\n    if (fromValues.description == \"\") {\r\n      errors.description = \"empty description !\";\r\n    }\r\n    if (fromValues.imageUrl == \"\") {\r\n      errors.imageUrl = \"empty imageUrl !\";\r\n    }\r\n    if (_.isEmpty(errors)) return null;\r\n    else return errors;\r\n  };\r\n\r\n  onCancel = () => {\r\n    this.props.history.push(\"/blogs/create\");\r\n  };\r\n\r\n  onFormSubmit = event => {\r\n    event.preventDefault();\r\n\r\n    const verificationResult = this.verifyFormInputs(\r\n      _.pick(this.state, [\"title\", \"description\", \"imageUrl\"])\r\n    );\r\n    if (!verificationResult) {\r\n      console.log(this.state.id);\r\n      this.props.onUpdateBlog(\r\n        this.state.id,\r\n        this.state.title,\r\n        this.state.description,\r\n        this.state.imageUrl\r\n      );\r\n      this.props.history.push(\"/blogs\");\r\n    }\r\n    this.setState({ errors: verificationResult });\r\n  };\r\n\r\n  componentDidMount() {\r\n    const { getBlogById, match } = this.props;\r\n\r\n    const blog = getBlogById(match.params.id);\r\n    console.log(blog);\r\n    this.setState({ ...blog });\r\n  }\r\n\r\n  render() {\r\n    const { errors } = this.state;\r\n    return (\r\n      <form onSubmit={this.onFormSubmit}>\r\n        <label>\r\n          title:\r\n          <input\r\n            name=\"title\"\r\n            type=\"text\"\r\n            value={this.state.title}\r\n            onChange={this.onInputChange}\r\n          />\r\n          <InputErrorMessage errors={errors} inputName=\"title\" />\r\n        </label>\r\n        <br />\r\n        <label>\r\n          description:\r\n          <input\r\n            name=\"description\"\r\n            type=\"text\"\r\n            value={this.state.description}\r\n            onChange={this.onInputChange}\r\n          />\r\n          <InputErrorMessage errors={errors} inputName=\"description\" />\r\n        </label>\r\n        <br />\r\n        <label>\r\n          imageUrl:\r\n          <input\r\n            name=\"imageUrl\"\r\n            type=\"text\"\r\n            value={this.state.imageUrl}\r\n            onChange={this.onInputChange}\r\n          />\r\n          <InputErrorMessage errors={errors} inputName=\"imageUrl\" />\r\n        </label>\r\n        <br />\r\n        <input type=\"submit\" value=\"update\" />\r\n        <button onClick={this.onCancel}>cancel</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FormUpdate;\r\n","import React, { Component } from \"react\";\r\n\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nclass Card extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  onClickShowUpdateForm = id => {\r\n    this.props.history.push(`/blogs/update/${id}`);\r\n  };\r\n\r\n  render() {\r\n    const { id, title, description, imageUrl, onDeleteBlog } = this.props;\r\n    return (\r\n      <div className=\"card\">\r\n        <div className=\"card-img-container\">\r\n          <img className=\"card-img\" src={imageUrl} />\r\n        </div>\r\n        <h1>{title}</h1>\r\n        <p>{description}</p>\r\n        <button\r\n          onClick={() => {\r\n            this.onClickShowUpdateForm(id);\r\n          }}\r\n        >\r\n          update\r\n        </button>\r\n        <button\r\n          onClick={() => {\r\n            onDeleteBlog(id);\r\n          }}\r\n        >\r\n          delete\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(Card);\r\n","import React, { Component } from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nclass Blogs extends Component {\r\n  render() {\r\n    const { listBlogs, onDeleteBlog } = this.props;\r\n    return (\r\n      <div>\r\n        {listBlogs.map(blog => {\r\n          return <Card key={blog.id} onDeleteBlog={onDeleteBlog} {...blog} />;\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Blogs;\r\n","import React, { Component } from \"react\";\r\nimport { Link, Switch, Route, NavLink } from \"react-router-dom\";\r\nimport Home from \"./Home\";\r\nimport Company from \"./Company\";\r\nimport About from \"./About\";\r\nimport PageNotFound from \"./PageNotFound\";\r\n\r\nimport FormCreate from \"./FormCreate\";\r\nimport FormUpdate from \"./FormUpdate\";\r\n\r\nimport Blogs from \"./Blogs\";\r\n\r\nclass AppRouter extends Component {\r\n  state = {\r\n    listBlogs: []\r\n  };\r\n\r\n  onCreateBlog = (id, title, description, imageUrl) => {\r\n    const { listBlogs } = this.state;\r\n    this.setState({\r\n      listBlogs: [...listBlogs, { id, title, description, imageUrl }]\r\n    });\r\n  };\r\n\r\n  onUpdateBlog = (id, title, description, imageUrl) => {\r\n    const { listBlogs } = this.state;\r\n\r\n    let newListBlogs = listBlogs.map(blog => {\r\n      if (blog.id == id) return { id, title, description, imageUrl };\r\n      return blog;\r\n    });\r\n    this.setState({ listBlogs: newListBlogs });\r\n  };\r\n\r\n  getBlogById = id => {\r\n    const { listBlogs } = this.state;\r\n    const blog = listBlogs.find(blog => {\r\n      return blog.id == id;\r\n    });\r\n    return blog;\r\n  };\r\n\r\n  onDeleteBlog = id => {\r\n    const { listBlogs } = this.state;\r\n\r\n    this.setState({\r\n      listBlogs: listBlogs.filter(blog => {\r\n        return blog.id != id;\r\n      })\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { listBlogs } = this.state;\r\n    return (\r\n      <>\r\n        <div>\r\n          <NavLink to=\"/\" exact activeClassName=\"active-link\">\r\n            Home\r\n          </NavLink>{\" \"}\r\n          <NavLink to=\"/company\" exact activeClassName=\"active-link\">\r\n            Company\r\n          </NavLink>{\" \"}\r\n          <NavLink to=\"/blogs/create\" exact activeClassName=\"active-link\">\r\n            create blog\r\n          </NavLink>{\" \"}\r\n          <NavLink to=\"/blogs\" exact activeClassName=\"active-link\">\r\n            list blogs\r\n          </NavLink>{\" \"}\r\n          <NavLink to=\"/about\" exact activeClassName=\"active-link\">\r\n            About\r\n          </NavLink>\r\n        </div>\r\n        <Switch>\r\n          <Route path=\"/\" exact component={Home} />\r\n          <Route path=\"/about\" exact component={About} />\r\n          <Route path=\"/company\" exact component={Company} />\r\n          <Route\r\n            path=\"/blogs/create\"\r\n            exact\r\n            render={props => {\r\n              return <FormCreate {...props} onCreateBlog={this.onCreateBlog} />;\r\n            }}\r\n          />\r\n          <Route\r\n            path=\"/blogs/update/:id\"\r\n            exact\r\n            render={props => {\r\n              return (\r\n                <FormUpdate\r\n                  {...props}\r\n                  getBlogById={this.getBlogById}\r\n                  onUpdateBlog={this.onUpdateBlog}\r\n                />\r\n              );\r\n            }}\r\n          />\r\n          <Route\r\n            path=\"/blogs\"\r\n            exact\r\n            render={props => {\r\n              return (\r\n                <Blogs\r\n                  {...props}\r\n                  onDeleteBlog={this.onDeleteBlog}\r\n                  listBlogs={listBlogs}\r\n                />\r\n              );\r\n            }}\r\n          />\r\n\r\n          <Route component={PageNotFound} />\r\n        </Switch>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AppRouter;\r\n","import React from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport f from \"react\";\r\nimport AppRouter from \"./components/AppRouter\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <AppRouter />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}